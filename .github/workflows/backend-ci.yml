name: Backend CI

# Trigger configuration with path filters
on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
  workflow_dispatch:

# Environment variables
env:
  NODE_VERSION: '18.x'
  WORKING_DIRECTORY: 'src/backend'
  COVERAGE_THRESHOLD: '80'

# Concurrency control to cancel redundant workflows
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Define required permissions
permissions:
  contents: read
  actions: read
  security-events: write
  id-token: write

jobs:
  # Build job
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci --audit
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: TypeScript Build
        run: |
          npm run typecheck
          npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ${{ env.WORKING_DIRECTORY }}/dist
          retention-days: 7

  # Test job
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci --audit
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Run tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
          CI: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ${{ env.WORKING_DIRECTORY }}/coverage
          retention-days: 7

      - name: Check coverage thresholds
        run: |
          COVERAGE_RESULT=$(node -p "require('./coverage/coverage-summary.json').total.lines.pct")
          if (( $(echo "$COVERAGE_RESULT < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Coverage ($COVERAGE_RESULT%) is below threshold ($COVERAGE_THRESHOLD%)"
            exit 1
          fi

  # Lint job
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci --audit
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run Prettier check
        run: npx prettier --check "src/**/*.{ts,tsx}"

      - name: Run security audit
        run: npm run security:audit
        continue-on-error: true

  # Security scan job
  security:
    name: Security Scan
    needs: [build, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Trigger deployment if all checks pass
  trigger-deploy:
    name: Trigger Deployment
    needs: [build, test, lint, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Trigger staging deployment
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: trigger-staging-deploy
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'